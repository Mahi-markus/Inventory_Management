# for environment
________________________________________________________For Linux___________________________________

python3 -m venv .venv
source .venv/bin/activate
deactivate
______________________________________________________For Windows__________________________________________

python -m venv .venv
 .venv/Scripts/activate 
deactivate







----------------------------for Django----------------------------------
docker exec -it djangotutorial-web-1


docker exec -it inventory_manage-web-1 python manage.py makemigrations
docker exec -it inventory_manage-web-1 python manage.py migrate


docker exec -it inventory_manage-web-1 python manage.py makemigrations polls

docker exec -it inventory_manage-web-1 python manage.py sqlmigrate polls 0001


docker exec -it inventory_manage-web-1 python manage.py shell

docker exec -it djangotutorial-web-1 python manage.py test polls

docker exec -it djangotutorial-web-1 python manage.py runserver
----------------------------------------------------------------------------------------
docker exec -it inventory_manage-web-1 python manage.py createsuperuser
-----------------------------------------------

docker exec -it inventory_manage-web-1 python manage.py test
docker exec -it inventory_manage-web-1 python manage.py generate_sitemap
---------------------------------------------

1.
Username: admin
admin@example.com
Password=admin123
2.
Username: admin2
email: admin2@gmail.com
Password=admin321


docker exec -it djangotutorial-web-1 python manage.py runserver
_____________________________________________pgadmin_____________________________-
Email: admin@admin.com
Password: admin123



--------------------------------------------------------
 docker compose up --build
  docker compose down
   docker compose up

   ---------------------------------------------

   # Register Location with custom admin class
@admin.register(Location)
class LocationAdmin(LeafletGeoAdmin):
    list_display = ('id', 'title','country_code', 'location_type', 'created_at','updated_at')
    search_fields = ('title', 'country_code')
    list_filter = ('location_type',)

    ------------------------------------
    docker exec -it inventory_manage-web-1 psql -U postgres
    docker exec -it postgres_db bash
psql -h inventory_manage-web-1  -U postgres



-------------------------------
image: postgis/postgis:15-3.3

docker run -d -p 5432:5432 --name inventory_manage-web-1 postgis/postgis:latest
----------------------------
docker volume ls
docker volume rm inventory_manage_postgres_data

then after build
do a migrate


--------------------------------------
testing


docker exec -it inventory_manage-web-1 coverage run manage.py test
docker exec -it inventory_manage-web-1 sh
docker exec -it inventory_manage-web-1 coverage run manage.py test
docker exec -it inventory_manage-web-1  coverage report
--------------------------------------